// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    logs "github.com/jdcloud-api/jdcloud-sdk-go/services/logs/models"
)

type CreateCollectInfoRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 日志主题 UID  */
    LogtopicUID string `json:"logtopicUID"`

    /* 采集状态，0-禁用，1-启用  */
    Enabled bool `json:"enabled"`

    /* 日志来源，只能是 custom/jdcloud  */
    AppCode string `json:"appCode"`

    /* 产品线,当日志来源为jdcloud时，必填  */
    ServiceCode string `json:"serviceCode"`

    /* 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效；custom类型的采集配置目前仅支持part方式，即用户指定实例列表；  */
    ResourceType string `json:"resourceType"`

    /* 采集实例列表：jdcloud类型最多添加20个资源；custom类型支持的资源数量不限； (Optional) */
    Resources []logs.Resource `json:"resources"`

    /* 日志类型。当appcode为jdcloud时为必填 (Optional) */
    TemplateUID *string `json:"templateUID"`

    /* 日志路径。当appcode为custom时为必填。目前仅支持对 Linux 云主机上的日志进行采集，路径支持通配符“*”和“？”，文件路径应符合 Linux 的文件路径规则 (Optional) */
    LogPath *string `json:"logPath"`

    /* 日志文件名。当appcode为custom时为必填。日志文件名支持正则表达式。 (Optional) */
    LogFile *string `json:"logFile"`

    /* 过滤器。设置过滤器后可根据用户设定的关键词采集部分日志，如仅采集 Error 的日志。目前最大允许5个。 (Optional) */
    LogFilters []string `json:"logFilters"`

    /* 过滤器是否启用。当appcode为custom时必填 (Optional) */
    FilterEnabled *bool `json:"filterEnabled"`
}

/*
 * param regionId: 地域 Id (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param enabled: 采集状态，0-禁用，1-启用 (Required)
 * param appCode: 日志来源，只能是 custom/jdcloud (Required)
 * param serviceCode: 产品线,当日志来源为jdcloud时，必填 (Required)
 * param resourceType: 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效；custom类型的采集配置目前仅支持part方式，即用户指定实例列表； (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateCollectInfoRequest(
    regionId string,
    logtopicUID string,
    enabled bool,
    appCode string,
    serviceCode string,
    resourceType string,
) *CreateCollectInfoRequest {

	return &CreateCollectInfoRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logtopics/{logtopicUID}/collectinfos",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LogtopicUID: logtopicUID,
        Enabled: enabled,
        AppCode: appCode,
        ServiceCode: serviceCode,
        ResourceType: resourceType,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param enabled: 采集状态，0-禁用，1-启用 (Required)
 * param appCode: 日志来源，只能是 custom/jdcloud (Required)
 * param serviceCode: 产品线,当日志来源为jdcloud时，必填 (Required)
 * param resourceType: 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效；custom类型的采集配置目前仅支持part方式，即用户指定实例列表； (Required)
 * param resources: 采集实例列表：jdcloud类型最多添加20个资源；custom类型支持的资源数量不限； (Optional)
 * param templateUID: 日志类型。当appcode为jdcloud时为必填 (Optional)
 * param logPath: 日志路径。当appcode为custom时为必填。目前仅支持对 Linux 云主机上的日志进行采集，路径支持通配符“*”和“？”，文件路径应符合 Linux 的文件路径规则 (Optional)
 * param logFile: 日志文件名。当appcode为custom时为必填。日志文件名支持正则表达式。 (Optional)
 * param logFilters: 过滤器。设置过滤器后可根据用户设定的关键词采集部分日志，如仅采集 Error 的日志。目前最大允许5个。 (Optional)
 * param filterEnabled: 过滤器是否启用。当appcode为custom时必填 (Optional)
 */
func NewCreateCollectInfoRequestWithAllParams(
    regionId string,
    logtopicUID string,
    enabled bool,
    appCode string,
    serviceCode string,
    resourceType string,
    resources []logs.Resource,
    templateUID *string,
    logPath *string,
    logFile *string,
    logFilters []string,
    filterEnabled *bool,
) *CreateCollectInfoRequest {

    return &CreateCollectInfoRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logtopics/{logtopicUID}/collectinfos",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LogtopicUID: logtopicUID,
        Enabled: enabled,
        AppCode: appCode,
        ServiceCode: serviceCode,
        ResourceType: resourceType,
        Resources: resources,
        TemplateUID: templateUID,
        LogPath: logPath,
        LogFile: logFile,
        LogFilters: logFilters,
        FilterEnabled: filterEnabled,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateCollectInfoRequestWithoutParam() *CreateCollectInfoRequest {

    return &CreateCollectInfoRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logtopics/{logtopicUID}/collectinfos",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *CreateCollectInfoRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param logtopicUID: 日志主题 UID(Required) */
func (r *CreateCollectInfoRequest) SetLogtopicUID(logtopicUID string) {
    r.LogtopicUID = logtopicUID
}

/* param enabled: 采集状态，0-禁用，1-启用(Required) */
func (r *CreateCollectInfoRequest) SetEnabled(enabled bool) {
    r.Enabled = enabled
}

/* param appCode: 日志来源，只能是 custom/jdcloud(Required) */
func (r *CreateCollectInfoRequest) SetAppCode(appCode string) {
    r.AppCode = appCode
}

/* param serviceCode: 产品线,当日志来源为jdcloud时，必填(Required) */
func (r *CreateCollectInfoRequest) SetServiceCode(serviceCode string) {
    r.ServiceCode = serviceCode
}

/* param resourceType: 采集实例类型, 只能是 all/part  当选择all时，传入的实例列表无效；custom类型的采集配置目前仅支持part方式，即用户指定实例列表；(Required) */
func (r *CreateCollectInfoRequest) SetResourceType(resourceType string) {
    r.ResourceType = resourceType
}

/* param resources: 采集实例列表：jdcloud类型最多添加20个资源；custom类型支持的资源数量不限；(Optional) */
func (r *CreateCollectInfoRequest) SetResources(resources []logs.Resource) {
    r.Resources = resources
}

/* param templateUID: 日志类型。当appcode为jdcloud时为必填(Optional) */
func (r *CreateCollectInfoRequest) SetTemplateUID(templateUID string) {
    r.TemplateUID = &templateUID
}

/* param logPath: 日志路径。当appcode为custom时为必填。目前仅支持对 Linux 云主机上的日志进行采集，路径支持通配符“*”和“？”，文件路径应符合 Linux 的文件路径规则(Optional) */
func (r *CreateCollectInfoRequest) SetLogPath(logPath string) {
    r.LogPath = &logPath
}

/* param logFile: 日志文件名。当appcode为custom时为必填。日志文件名支持正则表达式。(Optional) */
func (r *CreateCollectInfoRequest) SetLogFile(logFile string) {
    r.LogFile = &logFile
}

/* param logFilters: 过滤器。设置过滤器后可根据用户设定的关键词采集部分日志，如仅采集 Error 的日志。目前最大允许5个。(Optional) */
func (r *CreateCollectInfoRequest) SetLogFilters(logFilters []string) {
    r.LogFilters = logFilters
}

/* param filterEnabled: 过滤器是否启用。当appcode为custom时必填(Optional) */
func (r *CreateCollectInfoRequest) SetFilterEnabled(filterEnabled bool) {
    r.FilterEnabled = &filterEnabled
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateCollectInfoRequest) GetRegionId() string {
    return r.RegionId
}

type CreateCollectInfoResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateCollectInfoResult `json:"result"`
}

type CreateCollectInfoResult struct {
    UID string `json:"uID"`
}