// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type TestMetricTaskRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 日志集 UID  */
    LogsetUID string `json:"logsetUID"`

    /* 日志主题 UID  */
    LogtopicUID string `json:"logtopicUID"`

    /* 聚合函数,支持 count sum max min avg  */
    Aggregate string `json:"aggregate"`

    /* 测试内容  */
    Content []string `json:"content"`

    /* 查询字段,支持 英文字母 数字 下划线 中划线 点（中文日志原文和各产品线的key）  */
    DataField string `json:"dataField"`

    /* 过滤语法，可以为空 (Optional) */
    FilterContent *string `json:"filterContent"`

    /* 是否打开过滤  */
    FilterOpen string `json:"filterOpen"`

    /* 过滤类型，只能是fulltext和 advance  */
    FilterType string `json:"filterType"`
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param aggregate: 聚合函数,支持 count sum max min avg (Required)
 * param content: 测试内容 (Required)
 * param dataField: 查询字段,支持 英文字母 数字 下划线 中划线 点（中文日志原文和各产品线的key） (Required)
 * param filterOpen: 是否打开过滤 (Required)
 * param filterType: 过滤类型，只能是fulltext和 advance (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewTestMetricTaskRequest(
    regionId string,
    logsetUID string,
    logtopicUID string,
    aggregate string,
    content []string,
    dataField string,
    filterOpen string,
    filterType string,
) *TestMetricTaskRequest {

	return &TestMetricTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/metrictaskTest",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        Aggregate: aggregate,
        Content: content,
        DataField: dataField,
        FilterOpen: filterOpen,
        FilterType: filterType,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param aggregate: 聚合函数,支持 count sum max min avg (Required)
 * param content: 测试内容 (Required)
 * param dataField: 查询字段,支持 英文字母 数字 下划线 中划线 点（中文日志原文和各产品线的key） (Required)
 * param filterContent: 过滤语法，可以为空 (Optional)
 * param filterOpen: 是否打开过滤 (Required)
 * param filterType: 过滤类型，只能是fulltext和 advance (Required)
 */
func NewTestMetricTaskRequestWithAllParams(
    regionId string,
    logsetUID string,
    logtopicUID string,
    aggregate string,
    content []string,
    dataField string,
    filterContent *string,
    filterOpen string,
    filterType string,
) *TestMetricTaskRequest {

    return &TestMetricTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/metrictaskTest",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        Aggregate: aggregate,
        Content: content,
        DataField: dataField,
        FilterContent: filterContent,
        FilterOpen: filterOpen,
        FilterType: filterType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewTestMetricTaskRequestWithoutParam() *TestMetricTaskRequest {

    return &TestMetricTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/metrictaskTest",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *TestMetricTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param logsetUID: 日志集 UID(Required) */
func (r *TestMetricTaskRequest) SetLogsetUID(logsetUID string) {
    r.LogsetUID = logsetUID
}

/* param logtopicUID: 日志主题 UID(Required) */
func (r *TestMetricTaskRequest) SetLogtopicUID(logtopicUID string) {
    r.LogtopicUID = logtopicUID
}

/* param aggregate: 聚合函数,支持 count sum max min avg(Required) */
func (r *TestMetricTaskRequest) SetAggregate(aggregate string) {
    r.Aggregate = aggregate
}

/* param content: 测试内容(Required) */
func (r *TestMetricTaskRequest) SetContent(content []string) {
    r.Content = content
}

/* param dataField: 查询字段,支持 英文字母 数字 下划线 中划线 点（中文日志原文和各产品线的key）(Required) */
func (r *TestMetricTaskRequest) SetDataField(dataField string) {
    r.DataField = dataField
}

/* param filterContent: 过滤语法，可以为空(Optional) */
func (r *TestMetricTaskRequest) SetFilterContent(filterContent string) {
    r.FilterContent = &filterContent
}

/* param filterOpen: 是否打开过滤(Required) */
func (r *TestMetricTaskRequest) SetFilterOpen(filterOpen string) {
    r.FilterOpen = filterOpen
}

/* param filterType: 过滤类型，只能是fulltext和 advance(Required) */
func (r *TestMetricTaskRequest) SetFilterType(filterType string) {
    r.FilterType = filterType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r TestMetricTaskRequest) GetRegionId() string {
    return r.RegionId
}

type TestMetricTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result TestMetricTaskResult `json:"result"`
}

type TestMetricTaskResult struct {
    Lines []string `json:"lines"`
    Value float64 `json:"value"`
}