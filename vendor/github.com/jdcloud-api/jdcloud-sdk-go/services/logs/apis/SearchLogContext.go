// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type SearchLogContextRequest struct {

    core.JDCloudRequest

    /* 地域 Id  */
    RegionId string `json:"regionId"`

    /* 日志集 UID  */
    LogsetUID string `json:"logsetUID"`

    /* 日志主题 UID  */
    LogtopicUID string `json:"logtopicUID"`

    /* 查询anchor,基于该值偏移进行上下文检索  */
    Anchor []interface{} `json:"anchor"`

    /* 搜索方向,默认both,可取值:up,down,both (Optional) */
    Direction *string `json:"direction"`

    /* 日志记录ID  */
    Id string `json:"id"`

    /* 查看上下文行数大小，最大支持200  */
    LineSize int64 `json:"lineSize"`

    /* 查询日志时返回的时间戳  */
    Time int64 `json:"time"`
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param anchor: 查询anchor,基于该值偏移进行上下文检索 (Required)
 * param id: 日志记录ID (Required)
 * param lineSize: 查看上下文行数大小，最大支持200 (Required)
 * param time: 查询日志时返回的时间戳 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewSearchLogContextRequest(
    regionId string,
    logsetUID string,
    logtopicUID string,
    anchor []interface{},
    id string,
    lineSize int64,
    time int64,
) *SearchLogContextRequest {

	return &SearchLogContextRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/logcontext",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        Anchor: anchor,
        Id: id,
        LineSize: lineSize,
        Time: time,
	}
}

/*
 * param regionId: 地域 Id (Required)
 * param logsetUID: 日志集 UID (Required)
 * param logtopicUID: 日志主题 UID (Required)
 * param anchor: 查询anchor,基于该值偏移进行上下文检索 (Required)
 * param direction: 搜索方向,默认both,可取值:up,down,both (Optional)
 * param id: 日志记录ID (Required)
 * param lineSize: 查看上下文行数大小，最大支持200 (Required)
 * param time: 查询日志时返回的时间戳 (Required)
 */
func NewSearchLogContextRequestWithAllParams(
    regionId string,
    logsetUID string,
    logtopicUID string,
    anchor []interface{},
    direction *string,
    id string,
    lineSize int64,
    time int64,
) *SearchLogContextRequest {

    return &SearchLogContextRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/logcontext",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        LogsetUID: logsetUID,
        LogtopicUID: logtopicUID,
        Anchor: anchor,
        Direction: direction,
        Id: id,
        LineSize: lineSize,
        Time: time,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewSearchLogContextRequestWithoutParam() *SearchLogContextRequest {

    return &SearchLogContextRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/logsets/{logsetUID}/logtopics/{logtopicUID}/logcontext",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 Id(Required) */
func (r *SearchLogContextRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param logsetUID: 日志集 UID(Required) */
func (r *SearchLogContextRequest) SetLogsetUID(logsetUID string) {
    r.LogsetUID = logsetUID
}

/* param logtopicUID: 日志主题 UID(Required) */
func (r *SearchLogContextRequest) SetLogtopicUID(logtopicUID string) {
    r.LogtopicUID = logtopicUID
}

/* param anchor: 查询anchor,基于该值偏移进行上下文检索(Required) */
func (r *SearchLogContextRequest) SetAnchor(anchor []interface{}) {
    r.Anchor = anchor
}

/* param direction: 搜索方向,默认both,可取值:up,down,both(Optional) */
func (r *SearchLogContextRequest) SetDirection(direction string) {
    r.Direction = &direction
}

/* param id: 日志记录ID(Required) */
func (r *SearchLogContextRequest) SetId(id string) {
    r.Id = id
}

/* param lineSize: 查看上下文行数大小，最大支持200(Required) */
func (r *SearchLogContextRequest) SetLineSize(lineSize int64) {
    r.LineSize = lineSize
}

/* param time: 查询日志时返回的时间戳(Required) */
func (r *SearchLogContextRequest) SetTime(time int64) {
    r.Time = time
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r SearchLogContextRequest) GetRegionId() string {
    return r.RegionId
}

type SearchLogContextResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result SearchLogContextResult `json:"result"`
}

type SearchLogContextResult struct {
    Data []interface{} `json:"data"`
    Total int64 `json:"total"`
}